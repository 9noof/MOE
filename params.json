{"name":"Moe","tagline":"Make Opensource Easy - tools for synchronizing repositories","body":"Introduction\r\n------------\r\n\r\nMOE has several concepts which litter the code. It's useful to understand them.\r\n\r\nA list of useful concepts\r\n-------------------------\r\n\r\n### Project\r\n\r\nA MOE project is one project that wants to be both internal and open source.\r\n\r\n### Codebase\r\n\r\nA Codebase is a set of files in a filesystem and its metadata. E.g., foo/Bar.java and foo/Baz.java, and that it came from this repository at this revision. This roughly corresponds to a subversion “export” or a git “tree”.\r\n\r\n### Writer\r\n\r\nA Writer takes a Codebase and edits the Repository to create a DraftRevision in which the Repository has the contents of the Codebase.\r\n\r\n### Repository\r\n\r\nMOE interacts with a repository in three ways:\r\n\r\n  * Determining what revisions there are\r\n  * Getting the contents at one revision\r\n  * Making a change (that can be submitted as a revision)\r\n\r\nThus, a Repository object has three members to fulfill these roles, respectively:\r\n\r\n  * RevisionHistory\r\n  * CodebaseCreator\r\n  * WriterCreator\r\n\r\n### Project Spaces\r\n\r\nA Project Space is one way of viewing a project's code. The most common project spaces are \"public\" and \"internal\". A Codebase knows what Project Space it is in.\r\n\r\n### Translators\r\n\r\nA Translator takes a Codebase in one Project Space and returns the equivalent Codebase in another Project Space. This is the central concept of MOE: **instead of scrubbing code once, the user describes the scrubbing in a repeatable manner so we can do it automatically.** A Translator must be configured in the config, and it performs translation by applying a preconfigured series of editors.\r\n\r\nFor instance, to translate from \"internal\" to \"public\", we may have to rearrange, then scrub, then run a shell command. We don't want to have to say the same series of editors every time we translate, so instead we configure it as part of the Translator from \"internal\" to \"public\".\r\n\r\n### Editor\r\n\r\nAn Editor takes a Codebase and returns a new Codebase. (This is very similar to the Translator interface described above. The difference is that the Editor doesn't change the project space.)\r\n\r\nExamples of Editors are:\r\n\r\n  * RearrangingEditory: rearranges the files according to a config. E.g., java/. -> src/.\r\n  * PatchingEditor: applies a patch file to the Codebase.\r\n  * ShellEditor: runs a shell command (e.g., a sed command)\r\n\r\nEditors must be configured in the config.\r\n\r\n### Equivalence\r\n\r\nIn MOE, two revisions are equivalent when they represent the same files as they appear in their respective repositories. The purpose of MOE is to get projects into equivalence whenever they get out of it.\r\n\r\n### Migration\r\n\r\nA Migration represents the series of changes needed to make one repository equivalent to another. It has four properties:\r\n\r\n  * name: String. The name of the migration, as given in the MOE config.\r\n  * fromRepository: String. The name of the repository to make equivalent.\r\n  * toRepository: String. The name of the repository to make fromRepository equivalent to.\r\n  * separateRevisions: Boolean.\r\n    * false: Combine all separate revisions in one repository into one big change in the other repository.\r\n    * true: Let all separate revisions in one repository remain separate changes in the other repository [NOTE: this is not yet supported].\r\n  * metadataScrubberConfig:\r\n    * usernamesToScrub: List<String>. All names to scrub from the metadata of a MOE commit.\r\n    * scrubConfidentialWords: Boolean. You must implement this yourself.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}